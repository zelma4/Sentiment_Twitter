#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–∞—Ç—É—Å—É Bitcoin Analysis Bot
"""

import subprocess
import os
import json
from datetime import datetime, timedelta
import requests

def check_bot_process():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –±–æ—Ç–∞"""
    try:
        result = subprocess.run(
            ["pgrep", "-f", "python.*main.py"], 
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            pids = [pid for pid in pids if pid]  # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ
            return pids
        else:
            return []
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—É: {e}")
        return []

def check_web_server():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∞—Ü—é—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get("http://localhost:8000", timeout=5)
        return response.status_code == 200
    except:
        return False

def check_recent_logs():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö"""
    log_files = ["bot_clean.log", "bot_output_new.log", "bot_output.log", "bitcoin_bot.log"]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r') as f:
                    lines = f.readlines()
                    
                if lines:
                    last_line = lines[-1].strip()
                    if last_line:
                        return log_file, last_line
                        
            except Exception as e:
                continue
                
    return None, None

def check_database_data():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ"""
    try:
        import sys
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        from database.models import get_session, SentimentData, PriceData
        
        session = get_session()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ sentiment –¥–∞–Ω—ñ
        cutoff = datetime.utcnow() - timedelta(hours=1)
        recent_sentiment = session.query(SentimentData).filter(
            SentimentData.timestamp >= cutoff
        ).count()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ price –¥–∞–Ω—ñ
        recent_price = session.query(PriceData).filter(
            PriceData.timestamp >= cutoff
        ).count()
        
        # –û—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∞
        latest_price = session.query(PriceData).order_by(
            PriceData.timestamp.desc()
        ).first()
        
        session.close()
        
        return {
            'sentiment_entries': recent_sentiment,
            'price_entries': recent_price,
            'latest_price': latest_price.price if latest_price else None,
            'latest_price_time': latest_price.timestamp if latest_price else None
        }
        
    except Exception as e:
        return {'error': str(e)}

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    print("üîç Bitcoin Analysis Bot - –°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å
    pids = check_bot_process()
    if pids:
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π (PID: {', '.join(pids)})")
        if len(pids) > 1:
            print("‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–∞–ø—É—â–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤!")
    else:
        print("‚ùå –ë–æ—Ç –ù–ï –∑–∞–ø—É—â–µ–Ω–∏–π")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_status = check_web_server()
    if web_status:
        print("‚úÖ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π: http://localhost:8000")
    else:
        print("‚ùå –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏
    log_file, last_log = check_recent_logs()
    if last_log:
        print(f"üìù –û—Å—Ç–∞–Ω–Ω—ñ–π –ª–æ–≥ ({log_file}):")
        print(f"   {last_log}")
    else:
        print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ª–æ–≥—ñ–≤")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ
    print("\nüìä –î–∞–Ω—ñ –≤ –±–∞–∑—ñ (–æ—Å—Ç–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∞):")
    db_data = check_database_data()
    
    if 'error' in db_data:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_data['error']}")
    else:
        print(f"   üí≠ Sentiment –∑–∞–ø–∏—Å—ñ–≤: {db_data['sentiment_entries']}")
        print(f"   üí∞ Price –∑–∞–ø–∏—Å—ñ–≤: {db_data['price_entries']}")
        if db_data['latest_price']:
            print(f"   üìà –û—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∞: ${db_data['latest_price']:,.2f}")
            print(f"   ‚è∞ –ß–∞—Å: {db_data['latest_price_time']}")
    
    # –°—Ç–∞—Ç—É—Å –≤–∏—Å–Ω–æ–≤–æ–∫
    print("\n" + "=" * 50)
    
    if pids and web_status and db_data.get('sentiment_entries', 0) > 0:
        print("üéâ –°–¢–ê–¢–£–°: –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
    elif pids and web_status:
        print("‚ö†Ô∏è  –°–¢–ê–¢–£–°: –ë–æ—Ç –ø—Ä–∞—Ü—é—î, –∞–ª–µ –º–∞–ª–æ –¥–∞–Ω–∏—Ö")
    elif pids:
        print("‚ö†Ô∏è  –°–¢–ê–¢–£–°: –ë–æ—Ç –ø—Ä–∞—Ü—é—î, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏")
    else:
        print("‚ùå –°–¢–ê–¢–£–°: –ë–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î!")
    
    print("\nüîß –ö–æ–º–∞–Ω–¥–∏:")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–∏: python main.py > bot.log 2>&1 &")
    print("   –ó—É–ø–∏–Ω–∏—Ç–∏: pkill -f 'python main.py'")
    print("   –î–∞—à–±–æ—Ä–¥: http://localhost:8000")
    print("   –õ–æ–≥–∏: tail -f bot_clean.log")

if __name__ == "__main__":
    main()
